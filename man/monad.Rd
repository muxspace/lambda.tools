% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monad.R
\name{monad}
\alias{monad}
\alias{Maybe}
\alias{Just}
\alias{Nothing}
\alias{unit}
\alias{\%>>=\%}
\alias{\%>=>\%}
\alias{\%<=<\%}
\alias{\%.\%}
\title{Provide monadi primitives}
\value{
Usually a monad
}
\description{
These functions implement basic monads as seen in Haskell.
}
\section{Usage}{

Maybe(a) %:=% a
Just(a) %:=% Maybe(a)
Nothing() %:=% Maybe(NA)

unit(x) %::% . : Maybe
unit(x) %as% Just(x)

Bind operator
m %>>=% g %::% Nothing : Function : Maybe
m %>>=% g %as% m

m %>>=% g %::% Just : Function : Maybe
m %>>=% g %as% g(m)

Regular composition f(g(x))
f %.% g %:=% function(...) f(g(...))

Monad composition g(f(x))
f %>=>% g %:=% { function(x) f(x) %>>=% g }

Monad composition f(g(x))
f %<=<% g %:=% { function(x) g(x) %>>=% f }
}

\section{Details}{

Monads are types that carry context. Monad operators enable chaining
monadic operations together.
}

\examples{
require(lambda.r)
safelog(x) \%::\% numeric : Maybe
safelog(x) \%when\% { x <= 0 } \%as\% Nothing()
safelog(x) \%:=\% Just(log(x))

safesqrt(x) \%::\% numeric : Maybe
safesqrt(x) \%when\% { x <= 0 } \%as\% Nothing()
safesqrt(x) \%:=\% Just(sqrt(x))

safelogsqrt <- safelog \%<=<\% safesqrt
safelogsqrt(-2)
safelogsqrt(2)
}
